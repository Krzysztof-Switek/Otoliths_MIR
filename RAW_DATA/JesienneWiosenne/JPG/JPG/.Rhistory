data <- as.data.frame(data)[order(data$x), ]
n <- nrow(data)
i <- rep(1:n, each=2)
newdata <- rbind(
transform(data[1, ], x=xmin, y=0),
transform(data[i, ], x=c(rbind(data$xmin, data$xmax))),
transform(data[n, ], x=xmax, y=0)
)
rownames(newdata) <- NULL
GeomPath$draw(newdata, scales, coordinates, ...)
}
guide_geom <- function(.) "path"
})
ggplot(pred%>%filter(Prediction=="Yes"),aes(Value))+geom_histogram(binwidth = 0.1, position = "dodge")+
xlim(0,1)
ggplot(pred%>%filter(Prediction=="Yes"),aes(Value))+geom_histogram( breaks=seq(0,1,by=.1),)
ggplot(pred%>%filter(Prediction=="Yes"),aes(Value))+geom_histogram( breaks=seq(0,1,by=.1))
ggplot(pred2, aes(prediction))+geom_bar()
pred <- predict(model,iris,"prob")
ggplot(pred,aes(Value))+geom_histogram( breaks=seq(0,1,by=.1))
ggplot(pred,aes(Yes))+geom_histogram( breaks=seq(0,1,by=.1))
ggplot(pred,aes(Yes))+geom_step( breaks=seq(0,1,by=.1))
ggplot(pred,aes(Yes))+geom_step()
ggplot(pred,aes(Yes))+geom_histogram( breaks=seq(0,1,by=.1))
ggplot(pred,aes(Yes))+geom_histogram( breaks=seq(0,1,by=.1), fill="grey50", alpha=0.1)
ggplot(pred,aes(Yes))+geom_histogram( breaks=seq(0,1,by=.1), fill="grey50", alpha=0.5)
theme_bw()
ggplot(pred,aes(Yes))+geom_histogram( breaks=seq(0,1,by=.1), fill="grey50", alpha=0.5)+
theme_bw()
ggplot(pred,aes(Yes))+geom_histogram( breaks=seq(0,1,by=.1), fill="grey50", alpha=0.5, color-"black")+
theme_bw()
ggplot(pred,aes(Yes))+geom_histogram( breaks=seq(0,1,by=.1), fill="grey50", alpha=0.5, color="black")+
theme_bw()
model4
set.seed(71)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
proximity=TRUE)
library(randomForest)
set.seed(71)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
proximity=TRUE)
iris.rf
print(iris.rf)
round(importance(iris.rf), 2)
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(iris[,1:4], iris.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(iris$Species)],
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
set.seed(17)
iris.urf <- randomForest(iris[, -5])
MDSplot(iris.urf, iris$Species)
## stratified sampling: draw 20, 30, and 20 of the species to grow each tree.
(iris.rf2 <- randomForest(iris[1:4], iris$Species,
sampsize=c(20, 30, 20)))
set.seed(131)
ozone.rf <- randomForest(Ozone ~ ., data=airquality, mtry=3,
importance=TRUE, na.action=na.omit)
print(ozone.rf)
## Show "importance" of variables: higher value mean more important:
round(importance(ozone.rf), 2)
## "x" can be a matrix instead of a data frame:
set.seed(17)
x <- matrix(runif(5e2), 100)
y <- gl(2, 50)
(myrf <- randomForest(x, y))
(predict(myrf, x))
## "complicated" formula:
(swiss.rf <- randomForest(sqrt(Fertility) ~ . - Catholic + I(Catholic < 50),
data=swiss))
(predict(swiss.rf, swiss))
## Test use of 32-level factor as a predictor:
set.seed(1)
x <- data.frame(x1=gl(53, 10), x2=runif(530), y=rnorm(530))
(rf1 <- randomForest(x[-3], x[[3]], ntree=10))
## Grow no more than 4 nodes per tree:
(treesize(randomForest(Species ~ ., data=iris, maxnodes=4, ntree=30)))
## test proximity in regression
iris.rrf <- randomForest(iris[-1], iris[[1]], ntree=101, proximity=TRUE, oob.prox=FALSE)
str(iris.rrf$proximity)
print(iris.mds$GOF)
round(importance(iris.rf), 2)
## Do MDS on 1 - proximity:
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(iris[,1:4], iris.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(iris$Species)],
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(iris.mds$GOF)
pairs(cbind(iris[,1:2], iris.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(iris$Species)],
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(iris.mds$GOF)
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
iris.mds
library(lme4)
library(nlme)
library(arm)
install.packages("arm")
library(arm)
data<-read.table("/home/lionel/Documents/PhD/GLMM_WS/data/rikz.txt",sepTRUE)
library(arm)
data<-read.table("/home/lionel/Documents/PhD/GLMM_WS/data/rikz.txt",sepTRUE)
data<-read.table("C:/Users/ssmolinski/Documents/R/RIKZ.txt",sepTRUE)
data<-read.table("C:/Users/ssmolinski/Documents/R/RIKZ.txt",sep=TRUE)
data<-read.table("C:/Users/ssmolinski/Documents/R/RIKZ.txt")
data
mod_lme1<-lme(Richness~NAP,data=data,random=~1|Beach)
data<-read.table("C:/Users/ssmolinski/Documents/R/RIKZ.txt")
data
mod_lme1<-lme(Richness~NAP,data=data,random=~1|Beach)
data
data<-read.table("C:/Users/ssmolinski/Documents/R/RIKZ.txt", header = T)
data
mod_lme1<-lme(Richness~NAP,data=data,random=~1|Beach)
mod_lme1
mod_lmer1<-lmer(Richness~NAP+(1|Beach),data=data)
mod_lme2<-lme(Richness~NAP,data=data,random=NAP|Beach)
mod_lme2<-lme(Richness~NAP,data=data,random=NAP|Beach)
mod_lmer2<-lmer(Richness~NAP+(NAP|Beach),data=data)
mod_glmer1<-glmer(Richness~NAP+(1|Beach),data=data,family="poisson")
x<-rnorm(120,0,1)
f<-gl(n=6,k=20)
modmat<-model.matrix(~x+f,data.frame(x=x,f=f))
betas<-c(1,2,0.3,-3,0.5,1.2,0.8)
y<-modmat%*%betas+rnorm(120,0,1)
m_lm<-lm(y~x+f)
#the mixed effect model
m_lme<-lme(y~x,random=~1|f)
par(mfrow=c(2,2))
plot(m_lm)
plot(fitted(m_lme),resid(m_lme))
qqnorm(resid(m_lme))
qqnorm(ranef(m_lme)[,1])
plot(x,resid(m_lme))
summary(m_lm)
summary(m_lme)
par(mfrow=c(1,1))
library(RColorBrewer)
pal<-brewer.pal(6,Set1ot(y~x,col=pal[f],pch=16,main="Linear Model"))  <- #############?????
for(i in 1:length(levels(f))){
if(i==1){
lines(x,coef(m_lm)[1]+coef(m_lm)[2]*x,col=pal[i],lwd=1.5)
}
else{
lines(x,coef(m_lm)[1]+coef(m_lm)[2]*x+coef(m_lm)[i+1],col=pal[i],lwd=1.5)
}
}
library(RColorBrewer)
pal<- brewer.pal(6,Set1ot(y~x,col=pal[f],pch=16,main="Linear Model"))  <- #############?????
for(i in 1:length(levels(f))){
if(i==1){
lines(x,coef(m_lm)[1]+coef(m_lm)[2]*x,col=pal[i],lwd=1.5)
}
else{
lines(x,coef(m_lm)[1]+coef(m_lm)[2]*x+coef(m_lm)[i+1],col=pal[i],lwd=1.5)
}
}
plot(y~x,col=pal[f],pch=16,main="Linear Mixed Model")
for(i in 1:length(levels(f))){
lines(x,fixef(m_lme)[1]+fixef(m_lme)[2]*x+ranef(m_lme)[i,1],col=pal[i],lwd=1.5)
}
par(mfrow=c(2,2))
plot(fitted(m_lme2),resid(m_lme2))
abline(h=0,lty=2,col="red")
qqnorm(resid(m_lme2))
qqline(resid(m_lme2))
qqnorm(ranef(m_lme2)[,1])
qqline(ranef(m_lme2)[,1])
qqnorm(ranef(m_lme2)[,2])
qqline(ranef(m_lme2)[,2])
scatter.smooth(fitted(m_lme2),sqrt(abs(resid(m_lme2))))
#wrong data
par(mfrow=c(2,2))
plot(fitted(m_lme2),resid(m_lme2))
abline(h=0,lty=2,col="red")
qqnorm(resid(m_lme2))
qqline(resid(m_lme2))
l <- replicate(
132,
list(sample(letters, 20)),
simplify = FALSE
)
l
library (plyr)
df <- ldply (l, data.frame)
df
require(randomForest)
set.seed(20121106)
(iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
keep.forest=FALSE, proximity=TRUE))
round(importance(iris.rf), 2)   # variable importance
### Variable importance plot
varImpPlot(iris.rf)
### Mis-classified plants
( which(iris.rf$predicted!=iris$Species) -> missed )
### MDS (Multi-Dimensional Scaling (or Principal Coordinate Analysis))
### using cmdscale (Classifical multi-dimensional scaling)
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(iris[,1:4], iris.mds$points), cex=0.6, gap=0,
col=as.numeric(iris$Species)+1,
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(iris.mds$GOF)   # cumulative proportions of variation
### MDS plot
MDSplot(iris.rf, iris$Species, palette=2:4,
pch=as.numeric(iris$Species))$points -> mdsPts
points(mdsPts[missed,1], mdsPts[missed,2],
pch=as.numeric(iris$Species[missed]),
col=c("red4","green4","blue4")[1+(missed>50)+(missed>100)]
)
text(mdsPts[missed,1], mdsPts[missed,2], pos=3, cex=0.6, xpd=NA,
label=as.character(missed),
col=c("red4","green4","blue4")[1+(missed>50)+(missed>100)]
)
(centers <- by(mdsPts,iris$Species,colMeans))  #MDS group centers
dist2 <- rbind(
setosa=rowSums(sweep(mdsPts[missed,],2,centers[['setosa']])^2),
versicolor=rowSums(sweep(mdsPts[missed,],2,centers[['versicolor']])^2),
virginica=rowSums(sweep(mdsPts[missed,],2,centers[['virginica']])^2)
)
dist2   # squared MDS distances from group centers for mis-classified plants
rownames(dist2)[apply(dist2,2,which.min)]
# It turned out from the above closest center IDs to the mis-classified
# plants: plant 134 is actually closest to the center where it belongs.
### Plotting the margins of random forest classifier
## Margin (of an observation) = the proportion of votes for
##   the correct class minus maximum proportion of votes for the
##   other classes
plot(margin(iris.rf))
abline(h=0,lty="dashed")
### Plotting outlying measures of observations
plot(outlier(iris.rf), type="h",
col=as.numeric(iris$Species)+1)
## Emphasizing mis-classified plants in the plot:
points(missed,outlier(iris.rf)[missed],type="h",lwd=2, # thick lines
col=(2:4)[1+(missed>50)+(missed>100)])
text(missed,outlier(iris.rf)[missed], pos=3, cex=0.6, xpd=NA,
label=as.character(missed),
col=(2:4)[1+(missed>50)+(missed>100)]
)  # label them
##### Growing forest, combining forests
## a. Growing forest by adding trees
set.seed(20121106)
iris.rf <- randomForest(Species ~ ., iris, ntree=400, norm.votes=FALSE)
iris.rf <- grow(iris.rf, 100)
## b. Combing forests
set.seed(20121106)
rf1 <- randomForest(Species ~ ., iris, ntree=300, norm.votes=FALSE)
rf2 <- randomForest(Species ~ ., iris, ntree=100, norm.votes=FALSE)
rf3 <- randomForest(Species ~ ., iris, ntree=100, norm.votes=FALSE)
(rf.all <- combine(rf1, rf2, rf3))
###### Extract 5th tree from a forest
getTree(update(iris.rf,keep.forest=T), 5, labelVar=T)
###### Partial dependence plot
partialPlot(update(iris.rf,keep.forest=T), iris,
Petal.Width, "setosa")
###### Tuning random forest
rf <- tuneRF(iris[-5],iris[[5]],stepFactor=1.5)#, doBest=T)
### Use party package to create random forest of conditional
### inference trees
require(party)
data(fgl, package="MASS")
sapply(fgl, class)
fgl.controls <- cforest_unbiased(ntree=100, mtry=3)
set.seed(11062012)
fgl.cf <- cforest(type ~ ., data=fgl, control=fgl.controls)
( varimp(fgl.cf, conditional=T) -> vimp )
require(lattice)
dotplot(sort(vimp), xlab="Variable Importance")
dotplot(sort(vimp),
xlab="Variable Importance\n(predictors to right of dashed vertical line are significant)",
panel = function(x,y){
panel.dotplot(x, y, col="NavyBlue", pch=16, cex=1.2)
panel.abline(v=abs(min(vimp)),
col="magenta",lty=3, lwd=2)
}
)
catches<- (A=c(0,1,10),B=c(0,0,10),C=c(0,0,10))
catches2<- (A=c(0,12,10),B=c(0,0,10),C=c(0,0,10))
catches1<-data.frame (A=c(0,1,10),B=c(0,0,10),C=c(0,0,10))
catches2<- data.frame(A=c(0,12,10),B=c(0,0,10),C=c(0,0,10))
library(vegan)
diversity(catches1)
diversity(catches2)
View(catches1)
View(catches2)
diversity(catches1)
diversity(catches2)
catches3<- data.frame(A=c(0,12,10),B=c(0,1,10),C=c(0,0,10))
diversity(catches3)
catches3<- data.frame(A=c(0,12,10),B=c(0,3,10),C=c(0,0,10))
diversity(catches3)
View(catches1)
diversity(catches1)
diversity(catches2)
diversity(catches3)
library(FLAssess)
library(FLCore)
library(FLEDA)
library(FLSAM)
library(FLXSA)
install.packages(c("FLCore", "FLa4a", "ggplotFL"), repos="http://flr-project.org/R")
install.packages("FLXSA")
library(FLXSA)
install.packages("C:/Users/ssmolinski/Downloads/FLXSA-master.zip", repos = NULL)
library(FLXSA)
library(`FLXSA-master`)
library(FLXSA-master)
library("FLXSA-master")
install_github("flr/FLXSA.git")
library(devtools)
install_github("flr/FLXSA.git")
install_github("flr/FLXSA.git")
install_github("flr/FLXSA")
library(FLXSA)
install_github("flr/FLXSA")
library(FLXSA)
install_github("flr/FLCore")
install_github("flr/FLXSA")
library(FLa4a)
library(plot3D)
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R")
library(FLCore)
library(FLEDA)
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("copula")
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R")
install.packages("gridExtra")
install.packages("triangle")
install.packages("coda")
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R")
library(FLCore)
library(FLEDA)
library(FLAssess)
library(FLXSA)
library(FLSTF)
library(FLBRP)
library(ggplotFL)
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R")
install.packages("devtools")
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R")
install.packages("FLXSA")
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R",dependencies = TRUE)
library(FLCore)
library(FLEDA)
library(FLAssess)
library(FLXSA)
library(FLSTF)
library(FLBRP)
library(ggplotFL)
install.packages("C:\Users\ssmolinski\AppData\Local\Temp\RtmpAPCzN9\downloaded_packages/FLash_2.5.2.tar.gz", repos = NULL, type="source")
install.packages("C:/Users/ssmolinski/AppData/Local/Temp/RtmpAPCzN9/downloaded_packages/FLash_2.5.2.tar.gz", repos = NULL, type="source")
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R",dependencies = TRUE)
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R",dependencies = TRUE)
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R",dependencies = TRUE)
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R",dependencies = TRUE)
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R",dependencies = TRUE)
library(FLCore)
library(FLEDA)
install.packages("C:/Users/ssmolinski/AppData/Local/Temp/RtmpAPCzN9/downloaded_packages/FLash_2.5.2.tar.gz", repos = NULL, type="source")
install.packages("C:/Users/ssmolinski/AppData/Local/Temp/RtmpAPCzN9/downloaded_packages/FLash_2.5.2.tar", repos = NULL, type="source")
install.packages("C:/Users/ssmolinski/AppData/Local/Temp/RtmpAPCzN9/downloaded_packages/FLash_2.5.2", repos = NULL, type="source")
install.packages(pkgs = c("FLCore","FLash","FLAssess","FLXSA","ggplotFL","FLBRP","FLa4a"), repos="http://flr-project.org/R",dependencies = TRUE)
library(FLAssess)
library(FLXSA)
library(FLSTF)
library(FLCore)
library(FLEDA)
library(FLAssess)
library(FLXSA)
library(FLSTF)
library(FLBRP)
install.packages("ggplot2")
library(FLCore)
library(FLEDA)
install.packages(pkgs = c("FLEDA"), repos="http://flr-project.org/R",dependencies = TRUE)
library(FLEDA)
library(FLAssess)
library(FLXSA)
library(FLSTF)
install.packages(pkgs = c("FLSTF"), repos="http://flr-project.org/R",dependencies = TRUE)
library(FLBRP)
install.packages("gridExtra")
library(ggplotFL)
library(FLBRP)
library(FLSTF)
install.packages(pkgs = c("FLSTF"), repos="http://flr-project.org/R",dependencies = TRUE)
library(FLCore)
library(FLEDA)
library(FLAssess)
library(FLXSA)
library(FLSTF)
library(FLBRP)
library(ggplotFL)
library(vegan)
diversity
install.packages("wle")
install.packages("leaps")
install.packages("DAAG")
install.packages("lawstat")
install.packages("prais")
install.packages("pls")
install.packages("faraway")
rnorm(100)
runif(100)
f<-NULL
for (i in 1:1000){
full[i]  <-mean(runif(100))
}
for (i in 1:1000){
f[i]  <-mean(runif(100))
}
mean(runif(100))
hist(f)
hist(runif(100))
hist(runif(100))
hist(runif(100))
hist(runif(100))
hist(runif(100))
hist(runif(100))
f<-NULL
for (i in 1:1000){
f[i]  <-mean(runif(100))
}
hist(f)
p1<-0.6
p2 <- 1-p1
p1<-0.8
p2 <- 1-p1
i <- 10
x<-6
praw<- (p1^x)(p2^i-x)
x<-6
praw<- (p1^x)(p2^i-x)
praw<- (p1^x)*(p2^i-x)
praw
i-x
p2^i-x
p2 <- 1-p1
p2
praw<- (p1^x)*(p2^i-x)
praw
p1^x
p2
i-x
praw<- (p1^x)*(p2^(i-x))
praw
p2^(i-x)
p2
p1
x
p1<-0.8
p2 <- 1-p1
0.8^7
df<-data.frame(l=1:10)
df$p <- NA
for (i in 1:10)
{
df$p[i]<-0.8^i
}
library(ggplot2)
ggplot(df, aes(l,p))+geom_line()
for (i in 1:10)
{
df$p[i]<-0.8^i*0.2^10-i
}
ggplot(df, aes(l,p))+geom_line()
df$p
0.8^i
(10-i)
for (i in 1:10)
{
df$p[i]<-0.8^i*0.2^(10-i)
}
ggplot(df, aes(l,p))+geom_line()
0.8^i
0.2^(10-i)
cars
AirPassengers
cor.test)AirPassengers=
mtcars
data <- mtcars
p1<-0.8
p2<-1-p1
df$i<-1:10
data.frame(i=1:10)
df<-data.frame(i=1:10)
df$p<-NA
library(Momocs)
library(stringr)
library(ggplot2)
library(tidyr)
library(dplyr)
setwd("C:/Users/ssmolinski/Desktop/Otolity/")
rm(list = ls())
sessionInfo()->sesioninfo
########################lista obserwacji do analizy
setwd("C:/Users/ssmolinski/Desktop/Otolity//JPG")
jpg.list <- list.files(pattern = ".JPG")
c<-read.csv("C:/Users/ssmolinski/Desktop/Otolity//otolity.csv", sep=';', dec=',')
colnames(c)[5]<-"LT"
c$LT<-as.numeric(c$LT)
qplot(c$LT)
c$ID<-paste(c$Grupa," (",c$Numer,").JPG",sep="")
c<-c%>%filter(uwagi==''&Populacja%in%c("J","W"))
